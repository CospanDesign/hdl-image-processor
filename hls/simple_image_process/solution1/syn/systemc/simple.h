// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _simple_HH_
#define _simple_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "simple_mul_32s_32bkb.h"
#include "simple_shift_reg.h"

namespace ap_rtl {

struct simple : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_out< sc_lv<4> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<32> > c_q0;
    sc_in< sc_lv<32> > x;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    simple(sc_module_name name);
    SC_HAS_PROCESS(simple);

    ~simple();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    simple_shift_reg* shift_reg_U;
    simple_mul_32s_32bkb<1,6,32,32,32>* simple_mul_32s_32bkb_U1;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<32> > shift_reg_d0;
    sc_signal< sc_lv<32> > shift_reg_q0;
    sc_signal< sc_lv<32> > i_cast_fu_131_p1;
    sc_signal< sc_lv<32> > i_cast_reg_180;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_1_fu_143_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_189;
    sc_signal< sc_lv<1> > tmp_fu_135_p3;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > grp_fu_124_p2;
    sc_signal< sc_lv<5> > i_1_reg_208;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > acc_1_fu_168_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > acc_reg_89;
    sc_signal< sc_lv<5> > i_phi_fu_106_p4;
    sc_signal< sc_lv<5> > i_reg_102;
    sc_signal< sc_lv<32> > data1_reg_114;
    sc_signal< sc_lv<64> > tmp_3_fu_149_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_154_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_158_p1;
    sc_signal< sc_lv<5> > grp_fu_124_p0;
    sc_signal< sc_lv<32> > grp_fu_162_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_168_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_grp_fu_124_p0();
    void thread_grp_fu_124_p2();
    void thread_i_cast_fu_131_p1();
    void thread_i_phi_fu_106_p4();
    void thread_shift_reg_address0();
    void thread_shift_reg_ce0();
    void thread_shift_reg_d0();
    void thread_shift_reg_we0();
    void thread_tmp_1_fu_143_p2();
    void thread_tmp_3_fu_149_p1();
    void thread_tmp_4_fu_154_p1();
    void thread_tmp_5_fu_158_p1();
    void thread_tmp_fu_135_p3();
    void thread_y();
    void thread_y_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
