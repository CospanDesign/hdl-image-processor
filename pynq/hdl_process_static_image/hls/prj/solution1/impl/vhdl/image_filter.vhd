-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    video_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    video_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.666670,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.215250,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=43,HLS_SYN_DSP=0,HLS_SYN_FF=6653,HLS_SYN_LUT=7916}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_video_in_TREADY : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_AXIvideo2Mat_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_Duplicate_U0_ap_start : STD_LOGIC;
    signal image_filter_Duplicate_U0_ap_done : STD_LOGIC;
    signal image_filter_Duplicate_U0_ap_continue : STD_LOGIC;
    signal image_filter_Duplicate_U0_ap_idle : STD_LOGIC;
    signal image_filter_Duplicate_U0_ap_ready : STD_LOGIC;
    signal image_filter_Duplicate_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Duplicate_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Duplicate_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_Duplicate_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_Duplicate_U0_dst1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_U0_dst1_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_Duplicate_U0_dst1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_U0_dst1_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_Duplicate_U0_dst2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_U0_dst2_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_Duplicate_U0_dst2_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_U0_dst2_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_ap_start : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_ap_done : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_ap_continue : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_ap_idle : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_ap_ready : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Split_1080_1920_2048_0_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Split_1080_1920_2048_0_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_dst0_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Split_1080_1920_2048_0_U0_dst0_data_stream_V_write : STD_LOGIC;
    signal image_filter_Split_1080_1920_2048_0_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Split_1080_1920_2048_0_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal image_filter_Consume_1080_1920_0_U0_ap_start : STD_LOGIC;
    signal image_filter_Consume_1080_1920_0_U0_ap_done : STD_LOGIC;
    signal image_filter_Consume_1080_1920_0_U0_ap_continue : STD_LOGIC;
    signal image_filter_Consume_1080_1920_0_U0_ap_idle : STD_LOGIC;
    signal image_filter_Consume_1080_1920_0_U0_ap_ready : STD_LOGIC;
    signal image_filter_Consume_1080_1920_0_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Consume_1080_1920_0_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Consume_1080_1920_0_U0_src_data_stream_V_read : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_start : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_done : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_continue : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_idle : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_ready : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_FAST_t_opr_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_FAST_t_opr_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_p_mask_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_FAST_t_opr_U0_p_mask_data_stream_V_write : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_start : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_done : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_continue : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_idle : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_ready : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_ap_start : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_ap_done : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_ap_continue : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_ap_idle : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_ap_ready : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_PaintMask_2048_0_1080_1920_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_mask_data_stream_V_read : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Mat2AXIvideo_U0_cols : STD_LOGIC_VECTOR (10 downto 0);
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_video_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal image_filter_Mat2AXIvideo_U0_video_out_TVALID : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_video_out_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal image_filter_Mat2AXIvideo_U0_video_out_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal image_filter_Mat2AXIvideo_U0_video_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_U0_video_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_U0_video_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_U0_video_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_V_full_n : STD_LOGIC;
    signal img_0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_V_full_n : STD_LOGIC;
    signal img_1_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_13_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_13_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_13_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_V_15_full_n : STD_LOGIC;
    signal img_1_data_stream_1_V_15_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_15_empty_n : STD_LOGIC;
    signal img_1_Y_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_Y_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_Y_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_UV_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_UV_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_UV_data_stream_0_V_empty_n : STD_LOGIC;
    signal mask_data_stream_0_V_full_n : STD_LOGIC;
    signal mask_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_data_stream_0_V_empty_n : STD_LOGIC;
    signal dmask_data_stream_0_V_full_n : STD_LOGIC;
    signal dmask_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dmask_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal img_2_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_1_V_full_n : STD_LOGIC;
    signal img_2_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_1_V_empty_n : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;

    component image_filter_AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        dst1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_0_V_full_n : IN STD_LOGIC;
        dst1_data_stream_0_V_write : OUT STD_LOGIC;
        dst1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_1_V_full_n : IN STD_LOGIC;
        dst1_data_stream_1_V_write : OUT STD_LOGIC;
        dst2_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_0_V_full_n : IN STD_LOGIC;
        dst2_data_stream_0_V_write : OUT STD_LOGIC;
        dst2_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_1_V_full_n : IN STD_LOGIC;
        dst2_data_stream_1_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Split_1080_1920_2048_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        dst0_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst0_data_stream_V_full_n : IN STD_LOGIC;
        dst0_data_stream_V_write : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Consume_1080_1920_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC );
    end component;


    component image_filter_FAST_t_opr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_full_n : IN STD_LOGIC;
        p_mask_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Dilate_0_0_1080_1920_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_PaintMask_2048_0_1080_1920_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_empty_n : IN STD_LOGIC;
        p_mask_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (10 downto 0);
        cols : IN STD_LOGIC_VECTOR (10 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        video_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        video_out_TVALID : OUT STD_LOGIC;
        video_out_TREADY : IN STD_LOGIC;
        video_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        video_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_image_filter_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_data_stream_0_V_13 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_data_stream_1_V_15 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_Y_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_1_UV_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_mask_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_dmask_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_img_2_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    image_filter_CONTROL_BUS_s_axi_U : component image_filter_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows => rows,
        cols => cols,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    image_filter_AXIvideo2Mat_U0 : component image_filter_AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_AXIvideo2Mat_U0_ap_start,
        ap_done => image_filter_AXIvideo2Mat_U0_ap_done,
        ap_continue => image_filter_AXIvideo2Mat_U0_ap_continue,
        ap_idle => image_filter_AXIvideo2Mat_U0_ap_idle,
        ap_ready => image_filter_AXIvideo2Mat_U0_ap_ready,
        video_in_TDATA => video_in_TDATA,
        video_in_TVALID => video_in_TVALID,
        video_in_TREADY => image_filter_AXIvideo2Mat_U0_video_in_TREADY,
        video_in_TKEEP => video_in_TKEEP,
        video_in_TSTRB => video_in_TSTRB,
        video_in_TUSER => video_in_TUSER,
        video_in_TLAST => video_in_TLAST,
        video_in_TID => video_in_TID,
        video_in_TDEST => video_in_TDEST,
        rows => image_filter_AXIvideo2Mat_U0_rows,
        cols => image_filter_AXIvideo2Mat_U0_cols,
        img_data_stream_0_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_V_full_n,
        img_data_stream_0_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_V_full_n,
        img_data_stream_1_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write);

    image_filter_Duplicate_U0 : component image_filter_Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Duplicate_U0_ap_start,
        ap_done => image_filter_Duplicate_U0_ap_done,
        ap_continue => image_filter_Duplicate_U0_ap_continue,
        ap_idle => image_filter_Duplicate_U0_ap_idle,
        ap_ready => image_filter_Duplicate_U0_ap_ready,
        rows => image_filter_Duplicate_U0_rows,
        cols => image_filter_Duplicate_U0_cols,
        src_data_stream_0_V_dout => img_0_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => img_0_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => image_filter_Duplicate_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_0_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n => img_0_data_stream_1_V_empty_n,
        src_data_stream_1_V_read => image_filter_Duplicate_U0_src_data_stream_1_V_read,
        dst1_data_stream_0_V_din => image_filter_Duplicate_U0_dst1_data_stream_0_V_din,
        dst1_data_stream_0_V_full_n => img_1_data_stream_0_V_full_n,
        dst1_data_stream_0_V_write => image_filter_Duplicate_U0_dst1_data_stream_0_V_write,
        dst1_data_stream_1_V_din => image_filter_Duplicate_U0_dst1_data_stream_1_V_din,
        dst1_data_stream_1_V_full_n => img_1_data_stream_1_V_full_n,
        dst1_data_stream_1_V_write => image_filter_Duplicate_U0_dst1_data_stream_1_V_write,
        dst2_data_stream_0_V_din => image_filter_Duplicate_U0_dst2_data_stream_0_V_din,
        dst2_data_stream_0_V_full_n => img_1_data_stream_0_V_13_full_n,
        dst2_data_stream_0_V_write => image_filter_Duplicate_U0_dst2_data_stream_0_V_write,
        dst2_data_stream_1_V_din => image_filter_Duplicate_U0_dst2_data_stream_1_V_din,
        dst2_data_stream_1_V_full_n => img_1_data_stream_1_V_15_full_n,
        dst2_data_stream_1_V_write => image_filter_Duplicate_U0_dst2_data_stream_1_V_write);

    image_filter_Split_1080_1920_2048_0_U0 : component image_filter_Split_1080_1920_2048_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Split_1080_1920_2048_0_U0_ap_start,
        ap_done => image_filter_Split_1080_1920_2048_0_U0_ap_done,
        ap_continue => image_filter_Split_1080_1920_2048_0_U0_ap_continue,
        ap_idle => image_filter_Split_1080_1920_2048_0_U0_ap_idle,
        ap_ready => image_filter_Split_1080_1920_2048_0_U0_ap_ready,
        rows => image_filter_Split_1080_1920_2048_0_U0_rows,
        cols => image_filter_Split_1080_1920_2048_0_U0_cols,
        src_data_stream_0_V_dout => img_1_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => img_1_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => image_filter_Split_1080_1920_2048_0_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_1_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n => img_1_data_stream_1_V_empty_n,
        src_data_stream_1_V_read => image_filter_Split_1080_1920_2048_0_U0_src_data_stream_1_V_read,
        dst0_data_stream_V_din => image_filter_Split_1080_1920_2048_0_U0_dst0_data_stream_V_din,
        dst0_data_stream_V_full_n => img_1_Y_data_stream_0_V_full_n,
        dst0_data_stream_V_write => image_filter_Split_1080_1920_2048_0_U0_dst0_data_stream_V_write,
        dst1_data_stream_V_din => image_filter_Split_1080_1920_2048_0_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => img_1_UV_data_stream_0_V_full_n,
        dst1_data_stream_V_write => image_filter_Split_1080_1920_2048_0_U0_dst1_data_stream_V_write);

    image_filter_Consume_1080_1920_0_U0 : component image_filter_Consume_1080_1920_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Consume_1080_1920_0_U0_ap_start,
        ap_done => image_filter_Consume_1080_1920_0_U0_ap_done,
        ap_continue => image_filter_Consume_1080_1920_0_U0_ap_continue,
        ap_idle => image_filter_Consume_1080_1920_0_U0_ap_idle,
        ap_ready => image_filter_Consume_1080_1920_0_U0_ap_ready,
        rows => image_filter_Consume_1080_1920_0_U0_rows,
        cols => image_filter_Consume_1080_1920_0_U0_cols,
        src_data_stream_V_dout => img_1_UV_data_stream_0_V_dout,
        src_data_stream_V_empty_n => img_1_UV_data_stream_0_V_empty_n,
        src_data_stream_V_read => image_filter_Consume_1080_1920_0_U0_src_data_stream_V_read);

    image_filter_FAST_t_opr_U0 : component image_filter_FAST_t_opr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_FAST_t_opr_U0_ap_start,
        ap_done => image_filter_FAST_t_opr_U0_ap_done,
        ap_continue => image_filter_FAST_t_opr_U0_ap_continue,
        ap_idle => image_filter_FAST_t_opr_U0_ap_idle,
        ap_ready => image_filter_FAST_t_opr_U0_ap_ready,
        rows => image_filter_FAST_t_opr_U0_rows,
        cols => image_filter_FAST_t_opr_U0_cols,
        p_src_data_stream_V_dout => img_1_Y_data_stream_0_V_dout,
        p_src_data_stream_V_empty_n => img_1_Y_data_stream_0_V_empty_n,
        p_src_data_stream_V_read => image_filter_FAST_t_opr_U0_p_src_data_stream_V_read,
        p_mask_data_stream_V_din => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_din,
        p_mask_data_stream_V_full_n => mask_data_stream_0_V_full_n,
        p_mask_data_stream_V_write => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_write);

    image_filter_Dilate_0_0_1080_1920_U0 : component image_filter_Dilate_0_0_1080_1920_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Dilate_0_0_1080_1920_U0_ap_start,
        ap_done => image_filter_Dilate_0_0_1080_1920_U0_ap_done,
        ap_continue => image_filter_Dilate_0_0_1080_1920_U0_ap_continue,
        ap_idle => image_filter_Dilate_0_0_1080_1920_U0_ap_idle,
        ap_ready => image_filter_Dilate_0_0_1080_1920_U0_ap_ready,
        rows => image_filter_Dilate_0_0_1080_1920_U0_rows,
        cols => image_filter_Dilate_0_0_1080_1920_U0_cols,
        p_src_data_stream_V_dout => mask_data_stream_0_V_dout,
        p_src_data_stream_V_empty_n => mask_data_stream_0_V_empty_n,
        p_src_data_stream_V_read => image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dmask_data_stream_0_V_full_n,
        p_dst_data_stream_V_write => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_write);

    image_filter_PaintMask_2048_0_1080_1920_U0 : component image_filter_PaintMask_2048_0_1080_1920_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_PaintMask_2048_0_1080_1920_U0_ap_start,
        ap_done => image_filter_PaintMask_2048_0_1080_1920_U0_ap_done,
        ap_continue => image_filter_PaintMask_2048_0_1080_1920_U0_ap_continue,
        ap_idle => image_filter_PaintMask_2048_0_1080_1920_U0_ap_idle,
        ap_ready => image_filter_PaintMask_2048_0_1080_1920_U0_ap_ready,
        rows => image_filter_PaintMask_2048_0_1080_1920_U0_rows,
        cols => image_filter_PaintMask_2048_0_1080_1920_U0_cols,
        p_src_data_stream_0_V_dout => img_1_data_stream_0_V_13_dout,
        p_src_data_stream_0_V_empty_n => img_1_data_stream_0_V_13_empty_n,
        p_src_data_stream_0_V_read => image_filter_PaintMask_2048_0_1080_1920_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_1_data_stream_1_V_15_dout,
        p_src_data_stream_1_V_empty_n => img_1_data_stream_1_V_15_empty_n,
        p_src_data_stream_1_V_read => image_filter_PaintMask_2048_0_1080_1920_U0_p_src_data_stream_1_V_read,
        p_mask_data_stream_V_dout => dmask_data_stream_0_V_dout,
        p_mask_data_stream_V_empty_n => dmask_data_stream_0_V_empty_n,
        p_mask_data_stream_V_read => image_filter_PaintMask_2048_0_1080_1920_U0_p_mask_data_stream_V_read,
        p_dst_data_stream_0_V_din => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_2_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_2_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_1_V_write);

    image_filter_Mat2AXIvideo_U0 : component image_filter_Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Mat2AXIvideo_U0_ap_start,
        ap_done => image_filter_Mat2AXIvideo_U0_ap_done,
        ap_continue => image_filter_Mat2AXIvideo_U0_ap_continue,
        ap_idle => image_filter_Mat2AXIvideo_U0_ap_idle,
        ap_ready => image_filter_Mat2AXIvideo_U0_ap_ready,
        rows => image_filter_Mat2AXIvideo_U0_rows,
        cols => image_filter_Mat2AXIvideo_U0_cols,
        img_data_stream_0_V_dout => img_2_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_2_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_2_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_2_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_read,
        video_out_TDATA => image_filter_Mat2AXIvideo_U0_video_out_TDATA,
        video_out_TVALID => image_filter_Mat2AXIvideo_U0_video_out_TVALID,
        video_out_TREADY => video_out_TREADY,
        video_out_TKEEP => image_filter_Mat2AXIvideo_U0_video_out_TKEEP,
        video_out_TSTRB => image_filter_Mat2AXIvideo_U0_video_out_TSTRB,
        video_out_TUSER => image_filter_Mat2AXIvideo_U0_video_out_TUSER,
        video_out_TLAST => image_filter_Mat2AXIvideo_U0_video_out_TLAST,
        video_out_TID => image_filter_Mat2AXIvideo_U0_video_out_TID,
        video_out_TDEST => image_filter_Mat2AXIvideo_U0_video_out_TDEST);

    img_0_data_stream_0_V_U : component FIFO_image_filter_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => image_filter_Duplicate_U0_src_data_stream_0_V_read);

    img_0_data_stream_1_V_U : component FIFO_image_filter_img_0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_V_full_n,
        if_write => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_V_dout,
        if_empty_n => img_0_data_stream_1_V_empty_n,
        if_read => image_filter_Duplicate_U0_src_data_stream_1_V_read);

    img_1_data_stream_0_V_U : component FIFO_image_filter_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Duplicate_U0_dst1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => image_filter_Duplicate_U0_dst1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => image_filter_Split_1080_1920_2048_0_U0_src_data_stream_0_V_read);

    img_1_data_stream_1_V_U : component FIFO_image_filter_img_1_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Duplicate_U0_dst1_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_V_full_n,
        if_write => image_filter_Duplicate_U0_dst1_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_V_dout,
        if_empty_n => img_1_data_stream_1_V_empty_n,
        if_read => image_filter_Split_1080_1920_2048_0_U0_src_data_stream_1_V_read);

    img_1_data_stream_0_V_13_U : component FIFO_image_filter_img_1_data_stream_0_V_13
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Duplicate_U0_dst2_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_13_full_n,
        if_write => image_filter_Duplicate_U0_dst2_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_13_dout,
        if_empty_n => img_1_data_stream_0_V_13_empty_n,
        if_read => image_filter_PaintMask_2048_0_1080_1920_U0_p_src_data_stream_0_V_read);

    img_1_data_stream_1_V_15_U : component FIFO_image_filter_img_1_data_stream_1_V_15
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Duplicate_U0_dst2_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_V_15_full_n,
        if_write => image_filter_Duplicate_U0_dst2_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_V_15_dout,
        if_empty_n => img_1_data_stream_1_V_15_empty_n,
        if_read => image_filter_PaintMask_2048_0_1080_1920_U0_p_src_data_stream_1_V_read);

    img_1_Y_data_stream_0_V_U : component FIFO_image_filter_img_1_Y_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Split_1080_1920_2048_0_U0_dst0_data_stream_V_din,
        if_full_n => img_1_Y_data_stream_0_V_full_n,
        if_write => image_filter_Split_1080_1920_2048_0_U0_dst0_data_stream_V_write,
        if_dout => img_1_Y_data_stream_0_V_dout,
        if_empty_n => img_1_Y_data_stream_0_V_empty_n,
        if_read => image_filter_FAST_t_opr_U0_p_src_data_stream_V_read);

    img_1_UV_data_stream_0_V_U : component FIFO_image_filter_img_1_UV_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Split_1080_1920_2048_0_U0_dst1_data_stream_V_din,
        if_full_n => img_1_UV_data_stream_0_V_full_n,
        if_write => image_filter_Split_1080_1920_2048_0_U0_dst1_data_stream_V_write,
        if_dout => img_1_UV_data_stream_0_V_dout,
        if_empty_n => img_1_UV_data_stream_0_V_empty_n,
        if_read => image_filter_Consume_1080_1920_0_U0_src_data_stream_V_read);

    mask_data_stream_0_V_U : component FIFO_image_filter_mask_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_din,
        if_full_n => mask_data_stream_0_V_full_n,
        if_write => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_write,
        if_dout => mask_data_stream_0_V_dout,
        if_empty_n => mask_data_stream_0_V_empty_n,
        if_read => image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_read);

    dmask_data_stream_0_V_U : component FIFO_image_filter_dmask_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_din,
        if_full_n => dmask_data_stream_0_V_full_n,
        if_write => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_write,
        if_dout => dmask_data_stream_0_V_dout,
        if_empty_n => dmask_data_stream_0_V_empty_n,
        if_read => image_filter_PaintMask_2048_0_1080_1920_U0_p_mask_data_stream_V_read);

    img_2_data_stream_0_V_U : component FIFO_image_filter_img_2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_V_full_n,
        if_write => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_V_dout,
        if_empty_n => img_2_data_stream_0_V_empty_n,
        if_read => image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_2_data_stream_1_V_U : component FIFO_image_filter_img_2_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_2_data_stream_1_V_full_n,
        if_write => image_filter_PaintMask_2048_0_1080_1920_U0_p_dst_data_stream_1_V_write,
        if_dout => img_2_data_stream_1_V_dout,
        if_empty_n => img_2_data_stream_1_V_empty_n,
        if_read => image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_read);




    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(image_filter_AXIvideo2Mat_U0_ap_idle, image_filter_Duplicate_U0_ap_idle, image_filter_Split_1080_1920_2048_0_U0_ap_idle, image_filter_Consume_1080_1920_0_U0_ap_idle, image_filter_FAST_t_opr_U0_ap_idle, image_filter_Dilate_0_0_1080_1920_U0_ap_idle, image_filter_PaintMask_2048_0_1080_1920_U0_ap_idle, image_filter_Mat2AXIvideo_U0_ap_idle)
    begin
        if (((ap_const_logic_1 = image_filter_AXIvideo2Mat_U0_ap_idle) and (ap_const_logic_1 = image_filter_Duplicate_U0_ap_idle) and (ap_const_logic_1 = image_filter_Split_1080_1920_2048_0_U0_ap_idle) and (ap_const_logic_1 = image_filter_Consume_1080_1920_0_U0_ap_idle) and (ap_const_logic_1 = image_filter_FAST_t_opr_U0_ap_idle) and (ap_const_logic_1 = image_filter_Dilate_0_0_1080_1920_U0_ap_idle) and (ap_const_logic_1 = image_filter_PaintMask_2048_0_1080_1920_U0_ap_idle) and (ap_const_logic_1 = image_filter_Mat2AXIvideo_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= image_filter_AXIvideo2Mat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(image_filter_Mat2AXIvideo_U0_ap_done)
    begin
        if ((ap_const_logic_1 = image_filter_Mat2AXIvideo_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_ready <= image_filter_AXIvideo2Mat_U0_ap_ready;
    image_filter_AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    image_filter_AXIvideo2Mat_U0_ap_start <= (ap_start);
    
    image_filter_AXIvideo2Mat_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_AXIvideo2Mat_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_AXIvideo2Mat_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_AXIvideo2Mat_U0_cols_i) := cols(32-1-image_filter_AXIvideo2Mat_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_AXIvideo2Mat_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_AXIvideo2Mat_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_AXIvideo2Mat_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_AXIvideo2Mat_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_AXIvideo2Mat_U0_rows_i) := rows(32-1-image_filter_AXIvideo2Mat_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_AXIvideo2Mat_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Consume_1080_1920_0_U0_ap_continue <= ap_const_logic_1;
    image_filter_Consume_1080_1920_0_U0_ap_start <= ap_start;
    
    image_filter_Consume_1080_1920_0_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Consume_1080_1920_0_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Consume_1080_1920_0_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Consume_1080_1920_0_U0_cols_i) := cols(32-1-image_filter_Consume_1080_1920_0_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Consume_1080_1920_0_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_Consume_1080_1920_0_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Consume_1080_1920_0_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Consume_1080_1920_0_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Consume_1080_1920_0_U0_rows_i) := rows(32-1-image_filter_Consume_1080_1920_0_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Consume_1080_1920_0_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Dilate_0_0_1080_1920_U0_ap_continue <= ap_const_logic_1;
    image_filter_Dilate_0_0_1080_1920_U0_ap_start <= ap_start;
    
    image_filter_Dilate_0_0_1080_1920_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Dilate_0_0_1080_1920_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Dilate_0_0_1080_1920_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Dilate_0_0_1080_1920_U0_cols_i) := cols(32-1-image_filter_Dilate_0_0_1080_1920_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Dilate_0_0_1080_1920_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_Dilate_0_0_1080_1920_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Dilate_0_0_1080_1920_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Dilate_0_0_1080_1920_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Dilate_0_0_1080_1920_U0_rows_i) := rows(32-1-image_filter_Dilate_0_0_1080_1920_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Dilate_0_0_1080_1920_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Duplicate_U0_ap_continue <= ap_const_logic_1;
    image_filter_Duplicate_U0_ap_start <= ap_start;
    
    image_filter_Duplicate_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Duplicate_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Duplicate_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Duplicate_U0_cols_i) := cols(32-1-image_filter_Duplicate_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Duplicate_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_Duplicate_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Duplicate_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Duplicate_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Duplicate_U0_rows_i) := rows(32-1-image_filter_Duplicate_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Duplicate_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_FAST_t_opr_U0_ap_continue <= ap_const_logic_1;
    image_filter_FAST_t_opr_U0_ap_start <= ap_start;
    
    image_filter_FAST_t_opr_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_FAST_t_opr_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_FAST_t_opr_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_FAST_t_opr_U0_cols_i) := cols(32-1-image_filter_FAST_t_opr_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_FAST_t_opr_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_FAST_t_opr_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_FAST_t_opr_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_FAST_t_opr_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_FAST_t_opr_U0_rows_i) := rows(32-1-image_filter_FAST_t_opr_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_FAST_t_opr_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    image_filter_Mat2AXIvideo_U0_ap_start <= ap_start;
    
    image_filter_Mat2AXIvideo_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Mat2AXIvideo_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Mat2AXIvideo_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Mat2AXIvideo_U0_cols_i) := cols(32-1-image_filter_Mat2AXIvideo_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Mat2AXIvideo_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_Mat2AXIvideo_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Mat2AXIvideo_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Mat2AXIvideo_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Mat2AXIvideo_U0_rows_i) := rows(32-1-image_filter_Mat2AXIvideo_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Mat2AXIvideo_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_PaintMask_2048_0_1080_1920_U0_ap_continue <= ap_const_logic_1;
    image_filter_PaintMask_2048_0_1080_1920_U0_ap_start <= ap_start;
    
    image_filter_PaintMask_2048_0_1080_1920_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_PaintMask_2048_0_1080_1920_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_PaintMask_2048_0_1080_1920_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_PaintMask_2048_0_1080_1920_U0_cols_i) := cols(32-1-image_filter_PaintMask_2048_0_1080_1920_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_PaintMask_2048_0_1080_1920_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_PaintMask_2048_0_1080_1920_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_PaintMask_2048_0_1080_1920_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_PaintMask_2048_0_1080_1920_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_PaintMask_2048_0_1080_1920_U0_rows_i) := rows(32-1-image_filter_PaintMask_2048_0_1080_1920_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_PaintMask_2048_0_1080_1920_U0_rows <= resvalue(11-1 downto 0);
    end process;

    image_filter_Split_1080_1920_2048_0_U0_ap_continue <= ap_const_logic_1;
    image_filter_Split_1080_1920_2048_0_U0_ap_start <= ap_start;
    
    image_filter_Split_1080_1920_2048_0_U0_cols_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Split_1080_1920_2048_0_U0_cols_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Split_1080_1920_2048_0_U0_cols_i in 0 to 32-1 loop
                v0_cpy(image_filter_Split_1080_1920_2048_0_U0_cols_i) := cols(32-1-image_filter_Split_1080_1920_2048_0_U0_cols_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Split_1080_1920_2048_0_U0_cols <= resvalue(11-1 downto 0);
    end process;

    
    image_filter_Split_1080_1920_2048_0_U0_rows_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable image_filter_Split_1080_1920_2048_0_U0_rows_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_B(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_B(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for image_filter_Split_1080_1920_2048_0_U0_rows_i in 0 to 32-1 loop
                v0_cpy(image_filter_Split_1080_1920_2048_0_U0_rows_i) := rows(32-1-image_filter_Split_1080_1920_2048_0_U0_rows_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        image_filter_Split_1080_1920_2048_0_U0_rows <= resvalue(11-1 downto 0);
    end process;

    video_in_TREADY <= image_filter_AXIvideo2Mat_U0_video_in_TREADY;
    video_out_TDATA <= image_filter_Mat2AXIvideo_U0_video_out_TDATA;
    video_out_TDEST <= image_filter_Mat2AXIvideo_U0_video_out_TDEST;
    video_out_TID <= image_filter_Mat2AXIvideo_U0_video_out_TID;
    video_out_TKEEP <= image_filter_Mat2AXIvideo_U0_video_out_TKEEP;
    video_out_TLAST <= image_filter_Mat2AXIvideo_U0_video_out_TLAST;
    video_out_TSTRB <= image_filter_Mat2AXIvideo_U0_video_out_TSTRB;
    video_out_TUSER <= image_filter_Mat2AXIvideo_U0_video_out_TUSER;
    video_out_TVALID <= image_filter_Mat2AXIvideo_U0_video_out_TVALID;
end behav;
