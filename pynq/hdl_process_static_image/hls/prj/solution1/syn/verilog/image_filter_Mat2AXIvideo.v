// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_Mat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        cols,
        img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read,
        img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read,
        video_out_TDATA,
        video_out_TVALID,
        video_out_TREADY,
        video_out_TKEEP,
        video_out_TSTRB,
        video_out_TUSER,
        video_out_TLAST,
        video_out_TID,
        video_out_TDEST
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st5_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv11_1 = 11'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [10:0] rows;
input  [10:0] cols;
input  [7:0] img_data_stream_0_V_dout;
input   img_data_stream_0_V_empty_n;
output   img_data_stream_0_V_read;
input  [7:0] img_data_stream_1_V_dout;
input   img_data_stream_1_V_empty_n;
output   img_data_stream_1_V_read;
output  [15:0] video_out_TDATA;
output   video_out_TVALID;
input   video_out_TREADY;
output  [1:0] video_out_TKEEP;
output  [1:0] video_out_TSTRB;
output  [0:0] video_out_TUSER;
output  [0:0] video_out_TLAST;
output  [0:0] video_out_TID;
output  [0:0] video_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_0_V_read;
reg img_data_stream_1_V_read;
reg video_out_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
reg    img_data_stream_0_V_blk_n;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_54;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it0;
reg   [0:0] exitcond4_i_reg_258;
reg    img_data_stream_1_V_blk_n;
reg    video_out_TDATA_blk_n;
reg   [10:0] p_3_i_reg_160;
reg    ap_sig_74;
wire   [10:0] r_V_fu_171_p2;
wire   [0:0] exitcond3_i_fu_182_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_88;
wire   [10:0] i_V_fu_187_p2;
reg   [10:0] i_V_reg_253;
wire   [0:0] exitcond4_i_fu_193_p2;
reg    ap_sig_98;
reg    ap_sig_ioackin_video_out_TREADY;
wire   [10:0] j_V_fu_198_p2;
wire   [0:0] axi_last_V_fu_204_p2;
reg   [0:0] axi_last_V_reg_267;
reg   [10:0] p_i_reg_149;
reg    ap_sig_cseq_ST_st5_fsm_3;
reg    ap_sig_126;
reg   [0:0] tmp_user_V_fu_92;
reg    ap_reg_ioackin_video_out_TREADY;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ioackin_video_out_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond3_i_fu_182_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_video_out_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))))) begin
            ap_reg_ioackin_video_out_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_98) & (1'b1 == video_out_TREADY))) begin
            ap_reg_ioackin_video_out_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & ~(1'b0 == exitcond4_i_fu_193_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond3_i_fu_182_p2))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & (1'b0 == exitcond4_i_fu_193_p2))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond3_i_fu_182_p2)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & ~(1'b0 == exitcond4_i_fu_193_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & (1'b0 == exitcond4_i_fu_193_p2))) begin
        p_3_i_reg_160 <= j_V_fu_198_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond3_i_fu_182_p2))) begin
        p_3_i_reg_160 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_74)) begin
        p_i_reg_149 <= ap_const_lv11_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_3)) begin
        p_i_reg_149 <= i_V_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))))) begin
        tmp_user_V_fu_92 <= 1'b0;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_74)) begin
        tmp_user_V_fu_92 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & (1'b0 == exitcond4_i_fu_193_p2))) begin
        axi_last_V_reg_267 <= axi_last_V_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))))) begin
        exitcond4_i_reg_258 <= exitcond4_i_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_V_reg_253 <= i_V_fu_187_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond3_i_fu_182_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond3_i_fu_182_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_54) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_88) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_126) begin
        ap_sig_cseq_ST_st5_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_video_out_TREADY)) begin
        ap_sig_ioackin_video_out_TREADY = video_out_TREADY;
    end else begin
        ap_sig_ioackin_video_out_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0))) begin
        img_data_stream_0_V_blk_n = img_data_stream_0_V_empty_n;
    end else begin
        img_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))))) begin
        img_data_stream_0_V_read = 1'b1;
    end else begin
        img_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0))) begin
        img_data_stream_1_V_blk_n = img_data_stream_1_V_empty_n;
    end else begin
        img_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))))) begin
        img_data_stream_1_V_read = 1'b1;
    end else begin
        img_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0))) begin
        video_out_TDATA_blk_n = video_out_TREADY;
    end else begin
        video_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond4_i_reg_258 == 1'b0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & ap_sig_98) & (1'b0 == ap_reg_ioackin_video_out_TREADY))) begin
        video_out_TVALID = 1'b1;
    end else begin
        video_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_74) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond3_i_fu_182_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : begin
            if (~((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & ~(1'b0 == exitcond4_i_fu_193_p2))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((1'b1 == ap_reg_ppiten_pp0_it0) & ~((1'b1 == ap_reg_ppiten_pp0_it1) & (ap_sig_98 | ((exitcond4_i_reg_258 == 1'b0) & (1'b0 == ap_sig_ioackin_video_out_TREADY)))) & ~(1'b0 == exitcond4_i_fu_193_p2))) begin
                ap_NS_fsm = ap_ST_st5_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st5_fsm_3 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_126 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_54 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_74 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_88 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_98 = (((exitcond4_i_reg_258 == 1'b0) & (img_data_stream_0_V_empty_n == 1'b0)) | ((exitcond4_i_reg_258 == 1'b0) & (img_data_stream_1_V_empty_n == 1'b0)));
end

assign axi_last_V_fu_204_p2 = ((p_3_i_reg_160 == r_V_fu_171_p2) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_182_p2 = ((p_i_reg_149 == rows) ? 1'b1 : 1'b0);

assign exitcond4_i_fu_193_p2 = ((p_3_i_reg_160 == cols) ? 1'b1 : 1'b0);

assign i_V_fu_187_p2 = (p_i_reg_149 + ap_const_lv11_1);

assign j_V_fu_198_p2 = (p_3_i_reg_160 + ap_const_lv11_1);

assign r_V_fu_171_p2 = ($signed(cols) + $signed(ap_const_lv11_7FF));

assign video_out_TDATA = {{img_data_stream_1_V_dout}, {img_data_stream_0_V_dout}};

assign video_out_TDEST = 1'b0;

assign video_out_TID = 1'b0;

assign video_out_TKEEP = ap_const_lv2_3;

assign video_out_TLAST = axi_last_V_reg_267;

assign video_out_TSTRB = ap_const_lv2_0;

assign video_out_TUSER = tmp_user_V_fu_92;

endmodule //image_filter_Mat2AXIvideo
